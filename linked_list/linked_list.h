#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

//////////////////////////////////////////////////////////////////////////////
// ListNode struct
//////////////////////////////////////////////////////////////////////////////
typedef struct ListNode
{
    int val;
    struct ListNode *next;
} ListNode;

//////////////////////////////////////////////////////////////////////////////
// Create a list node
// 
// @param data data to create
//////////////////////////////////////////////////////////////////////////////
ListNode * create_node(int data);

//////////////////////////////////////////////////////////////////////////////
// Insert a node into front of a linked list
//
// @param head pointer to the head of a linked list
// @param data data to insert
//////////////////////////////////////////////////////////////////////////////
void insert_front(ListNode **head, int data);

//////////////////////////////////////////////////////////////////////////////
// Insert a node into tail of a linked list
//
// @param head pointer to the head of a linked list
// @param data data to insert
//////////////////////////////////////////////////////////////////////////////
void insert_back(ListNode **head, int data);

//////////////////////////////////////////////////////////////////////////////
// Delete a list
// 
// @param head pointer to the head of a linked list
//////////////////////////////////////////////////////////////////////////////
ListNode * delete_list(ListNode **head);

//////////////////////////////////////////////////////////////////////////////
// Print entire data of a linked list
// 
// @param head pointer to the head of a linked list
//////////////////////////////////////////////////////////////////////////////
ListNode * print_list(ListNode **head);

//////////////////////////////////////////////////////////////////////////////
// Size of a list
// 
// @param head pointer to the head of a linked list
//////////////////////////////////////////////////////////////////////////////
unsigned int size(ListNode **head);

//////////////////////////////////////////////////////////////////////////////
// Create a linked list from array
//
// @param data array of int to be stored into a linked list
// @param size size of input data array
// @param inverse flag to indicate order of list against input data
//////////////////////////////////////////////////////////////////////////////
ListNode *create_list(int const data[], unsigned int const size,
   bool inverse);
